package homework;

import java.util.Scanner;

/**
 *  给定n个整数（可能为负数）组成的序列a[1],a[2],a[3],…,a[n],求该序列如a[i]+a[i+1]+…+a[j]的子段和的最大值。
 *  当所给的整数均为负数时定义子段和为0，依此定义，所求的最优值为： Max{0,a[i]+a[i+1]+…+a[j]},1<=i<=j<=n
 *  例如，当（a[1],a[2],a[3],a[4],a[5],a[6]）=(-2,11,-4,13,-5,-2)时，最大子段和为20。
 *  @author js-potato
 *
 */
public class MaxSubSum {
	public static void main(String[] args) {
		int[] array = new int[100];
		Scanner sc = new Scanner(System.in);
		String s = sc.next();
		String[] str = s.split(",");
		
		for(int i = 0; i < str.length; i++) {
			array[i] = Integer.parseInt(str[i]);
		}
		
        int result = MaxSum.maxSunArray(array, str.length);
        System.out.println("连续子数组之最大和为："+result);
	}
}

class MaxSum {
	public static int maxSunArray(int[] array, int length) {
        
       int sum = 0;     
       int max = 0;   
       int summax = 0;
       for (int i = 0; i < length; i++) {
           summax += array[i];
           if(sum <= 0){      		//若当前连续子项和sum小于等于0,则为sum赋下一项值
               sum = array[i];      
           }else{
               sum += array[i];     //如果sum的值大于0,则继续与下一项相加
           }
           if(sum > max){        	//max记录最大值
               max = sum;       	
           }
       }
       if(max == summax) {			//全项转子项
    	   max -= (array[0] > array[length - 1]) ? array[length - 1] : array[0];
       }
       return max;
    }  
}
